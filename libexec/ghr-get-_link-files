#!/usr/bin/env bash
source $GHR_GET_ROOT/lib/common-lib.bash

package_dir="$1"
mode="$2"
names="$3"
# TODO use names
target_dir="$GHR_GET_ROOT/$mode"

function find_files_bin() {
  find "$1" \
    -mindepth 1 -maxdepth 1 \
    \( -type f -or -type l \) -executable 2> /dev/null
}

function get_files_bin() {
  local package_dir="$1"

  # If the plugin file exists, there is no executable file.
  plugins="$(get_files_plugins "$package_dir")"
  if [[ "$plugins" != "" ]]; then
    return
  fi

  # find bin/*
  files=$(find_files_bin "$package_dir/bin")
  if [ $? -ne 0 ]; then
    # find ./*
    files=$(find_files_bin "$package_dir")
  fi
  echo "$files"
}

function get_files_plugins() {
  local package_dir="$1"
  # find *.plugin.*sh
  files=$(find "$package_dir" -mindepth 1 -maxdepth 1 -name "*.plugin.*sh" 2> /dev/null)
  echo "$files"
}

# remove links
ghr-get-_unlink-files "$@"

# In the case of a directory-only hierarchy, that directory is the package_dir.
dirnames=$(find "$package_dir" -mindepth 1 -maxdepth 1 2> /dev/null)
if [[ $(echo "$dirnames" | wc -l) -eq 1 ]] && [[ $(find "$dirnames" -maxdepth 0 -type d | wc -l) -eq 1 ]]; then
  package_dir="$dirnames"
fi

# find link files.
if [[ "$names" != "" ]]; then
  files=$(find "$package_dir" -path "$package_dir/$names")
else
  files=$(eval get_files_$mode "$package_dir")
fi

# create links
[[ "$files" == "" ]] && exit
[[ -d $target_dir ]] || mkdir -p $target_dir
ln -fs $files $target_dir

for file in $files; do
  echo "Link to $mode/${file##*/}"
done
